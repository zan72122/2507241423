name: Create Veo3 Video from Text

on:
  workflow_dispatch:
    inputs:
      prompt:
        description: '動画生成用のテキストプロンプト'
        required: true
        type: string

jobs:
  setup-branch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      branch-name: ${{ steps.create-branch.outputs.branch-name }}
      folder-name: ${{ steps.create-branch.outputs.folder-name }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Create branch for video generation
        id: create-branch
        run: |
          BRANCH_NAME="veo3-video/$(date +%Y%m%d)-${{ github.run_id }}"
          FOLDER_NAME="veo3-video-$(date +%Y%m%d)-${{ github.run_id }}"
          git checkout -b $BRANCH_NAME
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git push origin $BRANCH_NAME
          echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "folder-name=$FOLDER_NAME" >> $GITHUB_OUTPUT
          echo "Created branch: $BRANCH_NAME"
          echo "Folder name: $FOLDER_NAME"

  video-generation:
    runs-on: ubuntu-latest
    needs: [setup-branch]
    permissions:
      contents: write
    outputs:
      video-completed: ${{ steps.video.outputs.completed }}
      video-url: ${{ steps.video.outputs.video-url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-branch.outputs.branch-name }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Claude Code SDK
        run: npm install @anthropic-ai/claude-code
      
      - name: Veo3動画生成エージェント
        id: video
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "::group::🎬 Veo3 Video Generation Agent Execution"
          echo "Starting at: $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          
          # 設定
          USER_PROMPT="${{ inputs.prompt }}"
          FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
          VIDEOS_DIR="$FOLDER_NAME/videos"
          
          echo "User prompt: $USER_PROMPT"
          echo "Target folder: $VIDEOS_DIR"
          
          # 動画フォルダを事前に作成
          if [ ! -d "$VIDEOS_DIR" ]; then
            mkdir -p "$VIDEOS_DIR"
            echo "📁 Created videos folder: $VIDEOS_DIR"
          fi
          
          # MCP設定の確認
          MCP_CONFIG_PATH=".claude/mcp-kamuicode.json"
          MCP_CONFIG_ABS_PATH="$(pwd)/$MCP_CONFIG_PATH"
          
          echo "📋 MCP Configuration Check:"
          echo "Working directory: $(pwd)"
          echo "MCP config path: $MCP_CONFIG_PATH"
          echo "MCP config absolute path: $MCP_CONFIG_ABS_PATH"
          echo "Allowed tools: mcp__t2v-fal-veo3-fast__veo3_fast_submit,mcp__t2v-fal-veo3-fast__veo3_fast_status,mcp__t2v-fal-veo3-fast__veo3_fast_result,Bash"
          
          # MCP設定ファイルの存在確認
          if [ -f "$MCP_CONFIG_ABS_PATH" ]; then
            echo "✅ MCP config file exists at: $MCP_CONFIG_ABS_PATH"
            echo "MCP servers configured:"
            jq -r '.mcpServers | keys[]' "$MCP_CONFIG_ABS_PATH" || true
          else
            echo "❌ MCP config file not found at: $MCP_CONFIG_ABS_PATH"
            exit 1
          fi
          
          # プロンプトの構築
          PROMPT="以下のテキストプロンプトを使用してVeo3 Fastで高品質な動画を生成してください。

          **ユーザーの動画生成プロンプト**: $USER_PROMPT

          **実行手順**:
          1. **テキストプロンプト**（$USER_PROMPT）を使用してVeo3 Fastで動画生成
          2. \`mcp__t2v-fal-veo3-fast__veo3_fast_submit\`ツールで動画生成を開始
          3. \`mcp__t2v-fal-veo3-fast__veo3_fast_status\`でステータス確認（動画生成には時間がかかるため、適度な間隔を空けて確認）
          4. Bashツールで \`sleep 60\` を実行してから再度ステータス確認（必要に応じて複数回）
          5. \`mcp__t2v-fal-veo3-fast__veo3_fast_result\`で結果取得して動画URLを取得
          6. **必須**: 取得した動画URLをBashツールで「$VIDEOS_DIR/generated-video.mp4」にダウンロード保存
          7. **確認**: ダウンロードが成功したことを確認し、ファイルサイズを表示

          **重要な注意点**:
          - 動画生成URLの有効期限は約1時間のため、生成後すぐにダウンロード
          - **動画は必ず「$VIDEOS_DIR」ディレクトリに保存**
          - **ファイル名は「generated-video.mp4」とする**
          - **動画生成は時間がかかります**: ステータス確認の間に適度な待機時間（60秒程度）を入れてください
          - **忍耐強く**: 生成完了まで複数回のステータス確認が必要な場合があります
          - **ダウンロード必須**: 動画URLを取得したら必ずwgetやcurlでローカルファイルに保存
          - **ファイル確認**: 保存後にls -lhでファイルサイズを確認し、0バイトでないことを確認
          
          **重要**: 
          1. **動画URLを取得したら必ずローカルファイルに保存してください。保存せずに終了するとワークフローが失敗します**
          2. **保存先**: 「$VIDEOS_DIR/generated-video.mp4」
          3. **保存確認**: ファイルサイズが0バイト以上であることを確認
          
          **動画生成の流れ**:
          1. submit（テキストプロンプト使用） → 2. status確認 → 3. sleep 60 → 4. 再度status確認 → 5. 完了まで繰り返し → 6. result取得 → 7. ダウンロード"
          
          echo "🚀 Starting Veo3 Video Generation Agent Claude Code CLI..."
          echo "📝 Prompt length: ${#PROMPT}"
          
          # Claude Code CLIの実行
          npx @anthropic-ai/claude-code \
            --mcp-config="$MCP_CONFIG_ABS_PATH" \
            --allowedTools "mcp__t2v-fal-veo3-fast__veo3_fast_submit,mcp__t2v-fal-veo3-fast__veo3_fast_status,mcp__t2v-fal-veo3-fast__veo3_fast_result,Bash" \
            --max-turns 25 \
            --verbose \
            --permission-mode "acceptEdits" \
            -p "$PROMPT" || {
              echo "::error::❌ Claude Code CLI execution failed"
              exit 1
            }
          
          # 生成された動画の確認
          echo ""
          echo "🎬 Checking generated videos..."
          if [ -d "$VIDEOS_DIR" ]; then
            VIDEO_COUNT=$(find "$VIDEOS_DIR" -name "*.mp4" -o -name "*.mov" -o -name "*.avi" | wc -l)
            echo "::notice::🎬 Generated $VIDEO_COUNT videos"
            if [ "$VIDEO_COUNT" -gt 0 ]; then
              echo "Video files:"
              find "$VIDEOS_DIR" -name "*.mp4" -o -name "*.mov" -o -name "*.avi" | head -3
              
              # 動画ファイルサイズの確認
              for video_file in $(find "$VIDEOS_DIR" -name "*.mp4" -o -name "*.mov" -o -name "*.avi" | head -3); do
                if [ -f "$video_file" ]; then
                  VIDEO_SIZE=$(stat -c%s "$video_file" 2>/dev/null || stat -f%z "$video_file" 2>/dev/null || echo "0")
                  echo "::notice::📹 Video file: $video_file (${VIDEO_SIZE} bytes)"
                  if [ "$VIDEO_SIZE" -eq 0 ]; then
                    echo "::error::❌ Video file is empty: $video_file"
                    exit 1
                  fi
                fi
              done
              
              # 最初の動画ファイルのURLを出力に設定
              FIRST_VIDEO=$(find "$VIDEOS_DIR" -name "*.mp4" -o -name "*.mov" -o -name "*.avi" | head -1)
              if [ -n "$FIRST_VIDEO" ]; then
                echo "video-url=$FIRST_VIDEO" >> $GITHUB_OUTPUT
              fi
            else
              echo "::error::❌ No videos were generated - this is required for the workflow to succeed"
              exit 1
            fi
          else
            echo "::error::❌ Videos directory not found - video generation failed"
            exit 1
          fi
          
          echo "completed=true" >> $GITHUB_OUTPUT
          echo "::endgroup::"
      
      - name: Commit and push videos
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add ${{ needs.setup-branch.outputs.folder-name }}/
          if git diff --cached --quiet; then
            echo "No videos to commit"
          else
            git commit -m "Add generated Veo3 video: ${{ inputs.prompt }}"
            git push origin ${{ needs.setup-branch.outputs.branch-name }}
          fi

  create-pr:
    runs-on: ubuntu-latest
    needs: [setup-branch, video-generation]
    permissions:
      contents: write
      pull-requests: write
      actions: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-branch.outputs.branch-name }}
      
      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          # ブランチ名を取得
          BRANCH_NAME="${{ needs.setup-branch.outputs.branch-name }}"
          
          # 変更をコミット
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # 最終成果物の確認とコミット
          FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
          echo "=== Final Veo3 Video Generation Summary ==="
          echo "Video folder: $FOLDER_NAME"
          
          VIDEOS_COUNT=0
          
          if [ -d "$FOLDER_NAME" ]; then
            echo "✅ Video folder exists: $FOLDER_NAME"
            echo "Contents:"
            ls -la "$FOLDER_NAME"
            
            # 動画ファイルの確認
            if [ -d "$FOLDER_NAME/videos" ]; then
              VIDEOS_COUNT=$(find "$FOLDER_NAME/videos" -name "*.mp4" -o -name "*.mov" -o -name "*.avi" | wc -l)
              echo "✅ Videos directory exists with $VIDEOS_COUNT files"
              if [ "$VIDEOS_COUNT" -gt 0 ]; then
                echo "Video files:"
                find "$FOLDER_NAME/videos" -name "*.mp4" -o -name "*.mov" -o -name "*.avi" | head -3
              fi
            else
              echo "❌ Videos directory not found"
            fi
          else
            echo "❌ Video folder not found: $FOLDER_NAME"
          fi
          
          # すべてのファイルをコミット
          git add "$FOLDER_NAME/" 2>/dev/null || true
          
          # コミットメッセージを作成
          COMMIT_MESSAGE="Add new Veo3 AI-generated video: ${{ inputs.prompt }}
          
          プロンプト: ${{ inputs.prompt }}
          生成日時: $(date -u +%Y-%m-%d\ %H:%M:%S)\ UTC
          
          📊 Generation Summary:
          - Videos: $VIDEOS_COUNT files (Veo3 Fast)
          
          🤖 Generated with Claude Code SDK & kamuicode MCP
          Co-Authored-By: Claude <noreply@anthropic.com>"
          
          # コミット
          if git diff --cached --quiet; then
            echo "Warning: No changes to commit"
            git commit --allow-empty -m "$COMMIT_MESSAGE"
          else
            git commit -m "$COMMIT_MESSAGE"
          fi
          
          # プッシュ
          git push origin $BRANCH_NAME
          
          # 生成されたファイルのパス取得（サマリ用）
          GENERATED_VIDEO_PATH=""
          
          if [ -d "$FOLDER_NAME/videos" ] && [ "$VIDEOS_COUNT" -gt 0 ]; then
            GENERATED_VIDEO_PATH=$(find "$FOLDER_NAME/videos" -name "*.mp4" -o -name "*.mov" -o -name "*.avi" | head -1)
          fi
          
          # GitHub Actions Summaryに結果を出力
          echo "# 🎬 Veo3 AI動画生成完了" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 生成情報" >> $GITHUB_STEP_SUMMARY
          echo "- **プロンプト**: ${{ inputs.prompt }}" >> $GITHUB_STEP_SUMMARY
          echo "- **生成日時**: $(date -u +%Y-%m-%d\ %H:%M:%S)\ UTC" >> $GITHUB_STEP_SUMMARY
          echo "- **モデル**: Veo3 Fast (Text-to-Video)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 📊 生成結果" >> $GITHUB_STEP_SUMMARY
          echo "- 🎬 **動画**: $VIDEOS_COUNT ファイル (Veo3 Fast)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 動画情報をサマリに表示（動画自体は表示できないため情報のみ）
          if [ -n "$GENERATED_VIDEO_PATH" ] && [ -f "$GENERATED_VIDEO_PATH" ]; then
            echo "## 🎬 生成された動画" >> $GITHUB_STEP_SUMMARY
            echo "📁 **ファイル**: \`$GENERATED_VIDEO_PATH\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ 動画はGitHub Actions Summaryでは再生できません。プルリクエストで確認してください。" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "## 🔗 次のステップ" >> $GITHUB_STEP_SUMMARY
          echo "1. プルリクエストで動画を確認" >> $GITHUB_STEP_SUMMARY
          echo "2. 必要に応じてメインブランチにマージ" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # プルリクエスト用のボディを作成（動画埋め込み対応）
          PR_BODY="🤖 Claude Code SDK & kamuicode MCPを使用してVeo3 Fastで自動生成された動画です."
          PR_BODY="$PR_BODY"$'\n\n'"プロンプト: ${{ inputs.prompt }}"
          PR_BODY="$PR_BODY"$'\n\n'"生成フロー:"
          PR_BODY="$PR_BODY"$'\n'"1. 🎬 Veo3 Fast でテキストから直接動画生成"
          PR_BODY="$PR_BODY"$'\n\n'"成果物:"
          PR_BODY="$PR_BODY"$'\n'"- 動画: $VIDEOS_COUNT ファイル"
          
          # 動画をプルリクに埋め込み（HTML5 video タグ使用）
          if [ -n "$GENERATED_VIDEO_PATH" ] && [ -f "$GENERATED_VIDEO_PATH" ]; then
            # GitHubの生ファイルURL構築
            GITHUB_VIDEO_URL="https://github.com/${{ github.repository }}/raw/$BRANCH_NAME/$GENERATED_VIDEO_PATH"
            PR_BODY="$PR_BODY"$'\n\n'"## 🎬 生成された動画"
            PR_BODY="$PR_BODY"$'\n\n'"<video width=\"640\" height=\"480\" controls>"
            PR_BODY="$PR_BODY"$'\n'"  <source src=\"$GITHUB_VIDEO_URL\" type=\"video/mp4\">"
            PR_BODY="$PR_BODY"$'\n'"  お使いのブラウザは動画タグをサポートしていません。"
            PR_BODY="$PR_BODY"$'\n'"  <a href=\"$GITHUB_VIDEO_URL\">動画をダウンロードして再生</a>"
            PR_BODY="$PR_BODY"$'\n'"</video>"
            PR_BODY="$PR_BODY"$'\n\n'"📁 **ファイルパス**: \`$GENERATED_VIDEO_PATH\`"
          fi
          
          PR_BODY="$PR_BODY

          ---
          🤖 Generated with [Claude Code SDK & kamuicode MCP](https://github.com/AI-Summoner/ai-summoner)"
          
          # PR作成 (GH_TOKENを使用)
          gh pr create \
            --title "新しいVeo3 AI生成動画: ${{ inputs.prompt }}" \
            --body "$PR_BODY" \
            --base main \
            --head $BRANCH_NAME